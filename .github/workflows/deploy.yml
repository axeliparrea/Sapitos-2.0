name: Deploy to Cloud Foundry

on:
  push:
    branches:
      - CloudFoundry

jobs:
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud Foundry CLI
        run: |
          sudo apt-get update && sudo apt-get install -y wget
          wget -O cf-cli.deb https://github.com/cloudfoundry/cli/releases/download/v8.14.0/cf8-cli-installer_8.14.0_x86-64.deb
          sudo dpkg -i cf-cli.deb

      - name: Login to Cloud Foundry
        env:
          CF_USERNAME: ${{ secrets.CF_USERNAME }}
          CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
          ACCESS_TOKENCLOUD: ${{ secrets.ACCESS_TOKENCLOUD }}
        run: |
          cf api "https://api.cf.us10-001.hana.ondemand.com"
          
          # Intenta primero con credenciales
          if [ ! -z "$CF_USERNAME" ] && [ ! -z "$CF_PASSWORD" ]; then
            echo "Intentando login con credenciales..."
            if cf login -u "$CF_USERNAME" -p "$CF_PASSWORD"; then
              echo "Login exitoso con credenciales"
            else
              echo "Falló login con credenciales, intentando con token SSO..."
              cf login --sso-passcode "$ACCESS_TOKENCLOUD"
            fi
          else
            echo "No hay credenciales, intentando con token SSO..."
            cf login --sso-passcode "$ACCESS_TOKENCLOUD"
          fi

      - name: Deploy Frontend
        run: |
          cd frontend
          cf push
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud Foundry CLI
        run: |
          sudo apt-get update && sudo apt-get install -y wget
          wget -O cf-cli.deb https://github.com/cloudfoundry/cli/releases/download/v8.14.0/cf8-cli-installer_8.14.0_x86-64.deb
          sudo dpkg -i cf-cli.deb

      - name: Login to Cloud Foundry
        env:
          CF_USERNAME: ${{ secrets.CF_USERNAME }}
          CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
          ACCESS_TOKENCLOUD: ${{ secrets.ACCESS_TOKENCLOUD }}
        run: |
          cf api "https://api.cf.us10-001.hana.ondemand.com"
          
          # Intenta primero con credenciales
          if [ ! -z "$CF_USERNAME" ] && [ ! -z "$CF_PASSWORD" ]; then
            echo "Intentando login con credenciales..."
            if cf login -u "$CF_USERNAME" -p "$CF_PASSWORD"; then
              echo "Login exitoso con credenciales"
            else
              echo "Falló login con credenciales, intentando con token SSO..."
              cf login --sso-passcode "$ACCESS_TOKENCLOUD"
            fi
          else
            echo "No hay credenciales, intentando con token SSO..."
            cf login --sso-passcode "$ACCESS_TOKENCLOUD"
          fi

      - name: Debug Login Failure
        run: |
          echo "Debugging login failure..."
          echo "CF_USERNAME: $CF_USERNAME"
          echo "CF_PASSWORD: $CF_PASSWORD"
          echo "ACCESS_TOKENCLOUD: $ACCESS_TOKENCLOUD"
          cf api "https://api.cf.us10-001.hana.ondemand.com"
          if [ ! -z "$CF_USERNAME" ] && [ ! -z "$CF_PASSWORD" ]; then
            echo "Attempting login with credentials..."
            cf login -u "$CF_USERNAME" -p "$CF_PASSWORD" || echo "Credential login failed."
          fi
          if [ ! -z "$ACCESS_TOKENCLOUD" ]; then
            echo "Attempting login with SSO token..."
            cf login --sso-passcode "$ACCESS_TOKENCLOUD" || echo "SSO token login failed."
          fi
          echo "Login debugging complete."

      - name: Prepare environment variables
        env:
          SERVER_NODE: ${{ secrets.SERVER_NODE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          BACK_PORT: ${{ secrets.BACK_PORT }}
          BACKEND_URL: ${{ secrets.BACKEND_URL }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
        run: |
          echo "Environment variables set dynamically from GitHub secrets."

      - name: Deploy Backend
        run: |
          cd backend
          cf push